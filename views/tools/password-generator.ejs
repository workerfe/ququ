<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>密码生成器 - 曲曲工具</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <script>
      var _hmt = _hmt || [];
      (function() {
        var hm = document.createElement("script");
        hm.src = "https://hm.baidu.com/hm.js?10d3246e4c5febb42eff37771756238e";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
      })();
    </script>
</head>
<body>
    <div class="tool-layout">
        <!-- 左侧导航 -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h1>曲曲工具</h1>
                <p>便捷的在线工具网站</p>
            </div>
            
            <nav class="sidebar-nav">
                <div class="nav-category">
                    <h3>文本处理工具</h3>
                    <ul class="nav-links">
                        <li><a href="/json-formatter">JSON 格式化</a></li>
                        <li><a href="/base64">Base64 编解码</a></li>
                        <li><a href="/url-encode">URL 编解码</a></li>
                    </ul>
                </div>
                
                <div class="nav-category">
                    <h3>开发工具</h3>
                    <ul class="nav-links">
                        <li><a href="/color-picker">颜色选择器</a></li>
                        <li><a href="/regex-test">正则表达式测试</a></li>
                        <li><a href="/hash-generator">Hash 生成器</a></li>
                    </ul>
                </div>
                
                <div class="nav-category">
                    <h3>生活工具</h3>
                    <ul class="nav-links">
                        <li><a href="/qr-code">二维码生成器</a></li>
                        <li><a href="/timestamp">时间戳转换</a></li>
                        <li><a href="/password-generator" class="active">密码生成器</a></li>
                    </ul>
                </div>
                
                <div class="nav-category">
                    <h3>其他</h3>
                    <ul class="nav-links">
                        <li><a href="/">返回首页</a></li>
                    </ul>
                </div>
            </nav>
        </div>

        <!-- 右侧内容区 -->
        <div class="tool-content">
            <div class="tool-header">
                <h1>密码生成器</h1>
                <p>生成安全可靠的随机密码</p>
            </div>

            <div class="tool-main">
                <div class="tool-container">
                    <!-- 密码设置 -->
                    <div class="form-group">
                      <label for="passwordLength">密码长度：<span id="lengthValue">12</span></label>
                      <input type="range" id="passwordLength" min="4" max="128" value="12" oninput="updateLength()" style="width: 100%; margin-top: 0.5rem;">
                      <div style="display: flex; justify-content: space-between; font-size: 0.8rem; color: #718096; margin-top: 0.2rem;">
                        <span>4</span>
                        <span>128</span>
                      </div>
                    </div>

                    <!-- 字符类型选择 -->
                    <div class="form-group">
                      <label>包含字符类型：</label>
                      <div style="margin-top: 0.5rem; display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem;">
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="includeUppercase" checked style="margin-right: 0.5rem;"> 大写字母 (A-Z)
                        </label>
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="includeLowercase" checked style="margin-right: 0.5rem;"> 小写字母 (a-z)
                        </label>
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="includeNumbers" checked style="margin-right: 0.5rem;"> 数字 (0-9)
                        </label>
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="includeSymbols" style="margin-right: 0.5rem;"> 特殊符号 (!@#$%^&*)
                        </label>
                      </div>
                    </div>

                    <!-- 高级选项 -->
                    <div class="form-group">
                      <label>高级选项：</label>
                      <div style="margin-top: 0.5rem; display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem;">
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="excludeSimilar" style="margin-right: 0.5rem;"> 排除相似字符 (0oO1lI)
                        </label>
                        <label style="display: flex; align-items: center; font-weight: normal;">
                          <input type="checkbox" id="excludeAmbiguous" style="margin-right: 0.5rem;"> 排除歧义字符 ({}[]())
                        </label>
                      </div>
                    </div>

                    <!-- 自定义字符 -->
                    <div class="form-group">
                      <label for="customChars">自定义字符（可选）：</label>
                      <input type="text" id="customChars" class="form-control" placeholder="输入自定义字符，将添加到密码字符集中">
                    </div>

                    <!-- 生成按钮 -->
                    <div class="form-group">
                      <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                        <button onclick="generatePassword()" class="btn">生成密码</button>
                        <button onclick="generateMultiple()" class="btn btn-secondary">生成多个</button>
                        <button onclick="clearAll()" class="btn btn-secondary">清空</button>
                      </div>
                    </div>

                    <!-- 生成的密码 -->
                    <div class="form-group">
                      <label for="generatedPassword">生成的密码：</label>
                      <div style="display: flex; gap: 0.5rem;">
                        <input type="text" id="generatedPassword" class="form-control" readonly>
                        <button onclick="copyPassword()" class="btn btn-secondary" style="white-space: nowrap;">复制</button>
                        <button onclick="togglePasswordVisibility()" class="btn btn-secondary" id="toggleBtn" style="white-space: nowrap;">👁️</button>
                      </div>
                    </div>

                    <!-- 密码强度指示器 -->
                    <div class="form-group">
                      <label>密码强度：</label>
                      <div id="strengthIndicator" style="margin-top: 0.5rem;">
                        <div id="strengthBar" style="height: 8px; background: #e2e8f0; border-radius: 4px; overflow: hidden;">
                          <div id="strengthFill" style="height: 100%; width: 0%; transition: all 0.3s ease;"></div>
                        </div>
                        <div id="strengthText" style="margin-top: 0.3rem; font-size: 0.9rem;">请生成密码</div>
                      </div>
                    </div>

                    <!-- 多个密码显示 -->
                    <div id="multiplePasswords" class="form-group" style="display: none;">
                      <label>生成的多个密码：</label>
                      <div id="passwordList" style="margin-top: 0.5rem; max-height: 300px; overflow-y: auto; border: 1px solid #e2e8f0; border-radius: 4px; padding: 1rem;"></div>
                    </div>

                    <div id="result" class="result-area" style="display: none;"></div>
                    
                    <!-- 密码安全提示 -->
                    <div class="result-area">
                      <h4>密码安全建议：</h4>
                      <ul>
                        <li><strong>长度：</strong>建议至少12位，越长越安全</li>
                        <li><strong>复杂性：</strong>包含大小写字母、数字和特殊符号</li>
                        <li><strong>唯一性：</strong>每个账户使用不同的密码</li>
                        <li><strong>定期更换：</strong>重要账户密码定期更新</li>
                        <li><strong>安全存储：</strong>使用密码管理器安全保存</li>
                        <li><strong>避免：</strong>生日、姓名、常用词汇等个人信息</li>
                      </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
      // 字符集定义
      const charSets = {
        uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
        lowercase: 'abcdefghijklmnopqrstuvwxyz',
        numbers: '0123456789',
        symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
      };
      
      const similarChars = '0oO1lI';
      const ambiguousChars = '{}[]()'
      
      // 更新长度显示
      function updateLength() {
        const length = document.getElementById('passwordLength').value;
        document.getElementById('lengthValue').textContent = length;
      }
      
      // 生成密码
      function generatePassword() {
        try {
          const password = createPassword();
          if (!password) return;
          
          document.getElementById('generatedPassword').value = password;
          document.getElementById('generatedPassword').type = 'password';
          document.getElementById('toggleBtn').textContent = '👁️';
          
          // 评估密码强度
          evaluatePasswordStrength(password);
          
          showResult('✅ 密码生成成功', 'success');
        } catch (error) {
          showResult('❌ 生成失败: ' + error.message, 'error');
        }
      }
      
      // 生成多个密码
      function generateMultiple() {
        try {
          const passwords = [];
          for (let i = 0; i < 10; i++) {
            const password = createPassword();
            if (password) passwords.push(password);
          }
          
          if (passwords.length === 0) return;
          
          const passwordList = document.getElementById('passwordList');
          passwordList.innerHTML = passwords.map((pwd, index) => 
            `<div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem; border-bottom: 1px solid #e2e8f0; font-family: monospace;">
              <span style="flex: 1; word-break: break-all;">${pwd}</span>
              <button onclick="copyText('${pwd}')" class="btn btn-secondary" style="margin-left: 0.5rem; padding: 0.2rem 0.5rem; font-size: 0.8rem;">复制</button>
            </div>`
          ).join('');
          
          document.getElementById('multiplePasswords').style.display = 'block';
          showResult('✅ 生成了 ' + passwords.length + ' 个密码', 'success');
        } catch (error) {
          showResult('❌ 生成失败: ' + error.message, 'error');
        }
      }
      
      // 创建密码核心逻辑
      function createPassword() {
        const length = parseInt(document.getElementById('passwordLength').value);
        const includeUppercase = document.getElementById('includeUppercase').checked;
        const includeLowercase = document.getElementById('includeLowercase').checked;
        const includeNumbers = document.getElementById('includeNumbers').checked;
        const includeSymbols = document.getElementById('includeSymbols').checked;
        const excludeSimilar = document.getElementById('excludeSimilar').checked;
        const excludeAmbiguous = document.getElementById('excludeAmbiguous').checked;
        const customChars = document.getElementById('customChars').value;
        
        // 检查至少选择一种字符类型
        if (!includeUppercase && !includeLowercase && !includeNumbers && !includeSymbols && !customChars) {
          throw new Error('请至少选择一种字符类型');
        }
        
        // 构建字符集
        let charset = '';
        if (includeUppercase) charset += charSets.uppercase;
        if (includeLowercase) charset += charSets.lowercase;
        if (includeNumbers) charset += charSets.numbers;
        if (includeSymbols) charset += charSets.symbols;
        if (customChars) charset += customChars;
        
        // 排除相似和歧义字符
        if (excludeSimilar) {
          charset = charset.split('').filter(char => !similarChars.includes(char)).join('');
        }
        if (excludeAmbiguous) {
          charset = charset.split('').filter(char => !ambiguousChars.includes(char)).join('');
        }
        
        if (charset.length === 0) {
          throw new Error('可用字符集为空，请调整设置');
        }
        
        // 生成密码
        let password = '';
        for (let i = 0; i < length; i++) {
          const randomIndex = Math.floor(Math.random() * charset.length);
          password += charset[randomIndex];
        }
        
        return password;
      }
      
      // 评估密码强度
      function evaluatePasswordStrength(password) {
        let score = 0;
        let feedback = [];
        
        // 长度评分
        if (password.length >= 12) score += 25;
        else if (password.length >= 8) score += 15;
        else score += 5;
        
        // 字符类型评分
        if (/[a-z]/.test(password)) score += 15;
        if (/[A-Z]/.test(password)) score += 15;
        if (/[0-9]/.test(password)) score += 15;
        if (/[^a-zA-Z0-9]/.test(password)) score += 20;
        
        // 复杂性评分
        const uniqueChars = new Set(password).size;
        if (uniqueChars >= password.length * 0.8) score += 10;
        
        // 确定强度等级
        let strength, color, text;
        if (score >= 80) {
          strength = '很强';
          color = '#38a169';
          text = '密码强度很高，非常安全';
        } else if (score >= 60) {
          strength = '强';
          color = '#68d391';
          text = '密码强度较高，比较安全';
        } else if (score >= 40) {
          strength = '中等';
          color = '#f6ad55';
          text = '密码强度中等，建议增加复杂性';
        } else if (score >= 20) {
          strength = '弱';
          color = '#fc8181';
          text = '密码强度较弱，建议重新生成';
        } else {
          strength = '很弱';
          color = '#e53e3e';
          text = '密码强度很弱，不建议使用';
        }
        
        // 更新UI
        const strengthFill = document.getElementById('strengthFill');
        const strengthText = document.getElementById('strengthText');
        
        strengthFill.style.width = score + '%';
        strengthFill.style.backgroundColor = color;
        strengthText.textContent = `${strength} (${score}/100) - ${text}`;
        strengthText.style.color = color;
      }
      
      // 切换密码可见性
      function togglePasswordVisibility() {
        const passwordInput = document.getElementById('generatedPassword');
        const toggleBtn = document.getElementById('toggleBtn');
        
        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          toggleBtn.textContent = '🙈';
        } else {
          passwordInput.type = 'password';
          toggleBtn.textContent = '👁️';
        }
      }
      
      // 复制密码
      function copyPassword() {
        const password = document.getElementById('generatedPassword').value;
        copyText(password, '密码');
      }
      
      // 复制文本通用函数
      function copyText(text, type = '内容') {
        if (!text) {
          showResult('❌ 没有可复制的' + type, 'error');
          return;
        }
        
        navigator.clipboard.writeText(text).then(() => {
          showResult(`✅ 已复制${type}到剪贴板`, 'success');
        }).catch(() => {
          showResult('❌ 复制失败，请手动复制', 'error');
        });
      }
      
      // 清空所有
      function clearAll() {
        document.getElementById('generatedPassword').value = '';
        document.getElementById('customChars').value = '';
        document.getElementById('multiplePasswords').style.display = 'none';
        document.getElementById('result').style.display = 'none';
        
        // 重置强度指示器
        document.getElementById('strengthFill').style.width = '0%';
        document.getElementById('strengthText').textContent = '请生成密码';
        document.getElementById('strengthText').style.color = '#718096';
      }
      
      function showResult(message, type) {
        const result = document.getElementById('result');
        result.textContent = message;
        result.style.display = 'block';
        result.style.color = type === 'success' ? '#38a169' : '#e53e3e';
        result.style.backgroundColor = type === 'success' ? '#f0fff4' : '#fed7d7';
        result.style.borderColor = type === 'success' ? '#9ae6b4' : '#feb2b2';
        
        setTimeout(() => {
          result.style.display = 'none';
        }, 3000);
      }
      
      // 页面加载时生成一个默认密码
      window.onload = function() {
        generatePassword();
      };
    </script>
  </body>
</html>